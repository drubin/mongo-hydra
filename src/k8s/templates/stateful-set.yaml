---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: cfg
spec:
  selector:
    matchLabels:
      # HAS to be equal to the service name
      app: cfg
  serviceName: cfg
  replicas: 3
  updateStrategy:
    type: RollingUpdate
  volumeClaimTemplates:
  - metadata:
      name: data
    spec:
      accessModes: ["ReadWriteOnce"]
      storageClassName: ssd
      resources:
        requests:
          storage: 10Gi
  template:
    metadata:
      labels:
        app: cfg
    spec:
      imagePullSecrets:
      - name: registry
      terminationGracePeriodSeconds: 60
      serviceAccountName: mongo
      volumes:
      - name: shared
        emptyDir: {}
      - name: config
        configMap:
          name: vault-agent-config
          items:
          - key: vault-agent-config.hcl
            path: vault-agent-config.hcl
      - name: scripts
        configMap:
          name: cert-scripts
          defaultMode: 0744
      - name: vault-token
        emptyDir:
          medium: Memory
      # Allow pods to not run as root and still access the volumes
      securityContext:
        fsGroup: 2000
      # Use vault-agent init container to authenticate to Vault
      initContainers:
      - name: cfg-vault-agent
        image: "vault"
        volumeMounts:
        - name: config
          mountPath: /etc/vault
        - name: vault-token
          mountPath: /home/vault
        args:
        - "agent"
        - "-config=/etc/vault/vault-agent-config.hcl"
        env:
        - name: VAULT_ADDR
          value: "http://vault.vault"
      # since init containers run in order, when the previous exits
      # the vault token will be created at /home/vault/.vault-token
      - name: cert-generator
        image: "vault"
        volumeMounts:
        - name: vault-token
          mountPath: /home/vault
        - name: shared
          mountPath: /certs
        - name: scripts
          mountPath: /scripts
        command: ["/scripts/wrapper.sh"]
        env:
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: SERVICE_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.labels['app']
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: VAULT_ADDR
          value: "http://vault.vault"
        - name: HOME
          value: /home/vault
        - name: SUBJECT_COMMON_NAME
          value: "$(POD_NAME).$(SERVICE_NAME).$(POD_NAMESPACE).svc.cluster.local"
      containers:
      # Actual container
      - name: cfg
        imagePullPolicy: Always
        image: mongo:4.0
        command:
        - 'mongod'
        - '--bind_ip'
        - '0.0.0.0'
        - --auth
        - --sslMode
        - requireSSL
        - --clusterAuthMode
        - x509
        - --sslPEMKeyFile
        - /certs/mongo/mongodb.pem
        - --sslCAFile
        - /certs/ca/ca.crt
        # Change from the default of /data/configdb to avoid confusion
        - --dbpath
        - "/data/db"
        ports:
        - containerPort: 27019
        volumeMounts:
        - name: data
          mountPath: /data/db
        - name: shared
          mountPath: /certs
        readinessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            # BEWARE THE PORT! Ready when either PRIMARY (1) or SECONDAY (2)
            # or replica set not initialized rs.status().code==94
            # yamllint disable-line rule:line-length
            - mongo --port 27019 --ssl --sslPEMKeyFile /certs/mongo/mongodb.pem --sslCAFile /certs/ca/ca.crt --sslAllowInvalidHostnames --authenticationMechanism=MONGODB-X509 --authenticationDatabase='$external' --eval "if(rs.status().myState==1||rs.status().myState==2||rs.status().code==94){quit(0)}else{quit(1)}"
          initialDelaySeconds: 5
          periodSeconds: 5
        resources:
          limits:
            memory: "2Gi"
          requests:
            memory: "2Gi"
      - name: mongodb-exporter
        env:
        - name: MONGO_PORT
          value: "27019"
        # Pod name will be the CA
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: SERVICE_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.labels['app']
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: SUBJECT_COMMON_NAME
          value: "$(POD_NAME).$(SERVICE_NAME).$(POD_NAMESPACE).svc.cluster.local"
        - name: MONGODB_URI
          value: mongodb://CN=$(SUBJECT_COMMON_NAME),OU=mongo-cluster,O=unu-production@localhost:$(MONGO_PORT)/?authMechanism=MONGODB-X509
        image: quay.io/utilitywarehouse/mongodb_exporter:v0.6.3
        imagePullPolicy: Always
        volumeMounts:
        # Mount init containers volume with cert in it
        - name: shared
          mountPath: /certs
        ports:
        - containerPort: 9216
          protocol: TCP
          name: metrics
        resources:
          requests:
            memory: 50Mi
          limits:
            memory: 100Mi
        command:
        - /bin/sh
        - -c
        # This pod will crash until it is able to connect to mongodb://localhost
        # This is to avoid a race condition where mongodb is not ready yet
        # yamllint disable-line rule:line-length
        - '/app/mongodb_exporter --test --mongodb.tls --mongodb.tls-cert "/certs/mongo/mongodb.pem" --mongodb.tls-ca "/certs/ca/ca.crt" --mongodb.tls-disable-hostname-validation && /app/mongodb_exporter --mongodb.tls --mongodb.tls-cert "/certs/mongo/mongodb.pem" --mongodb.tls-ca "/certs/ca/ca.crt" --mongodb.tls-disable-hostname-validation'